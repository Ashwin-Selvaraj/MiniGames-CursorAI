{"ast":null,"code":"var _jsxFileName = \"/Users/ashwin/Desktop/PG Dashboard/pg/src/components/fruitNinja.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\n// Add to imports\nimport BackButton from './BackButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FRUITS = [{\n  type: 'apple',\n  color: '#ff0000',\n  points: 1\n}, {\n  type: 'orange',\n  color: '#ffa500',\n  points: 2\n}, {\n  type: 'banana',\n  color: '#ffff00',\n  points: 3\n}, {\n  type: 'watermelon',\n  color: '#ff6b6b',\n  points: 5\n}, {\n  type: 'bomb',\n  color: '#000000',\n  points: -10\n}];\nconst FruitNinja = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [highScore, setHighScore] = useState(parseInt(localStorage.getItem('fruitNinjaHighScore')) || 0);\n  const [fruits, setFruits] = useState([]);\n  const [slicedFruits, setSlicedFruits] = useState([]);\n  const [mouseTrail, setMouseTrail] = useState([]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let animationFrameId;\n    let lastSpawnTime = 0;\n    const spawnInterval = 1000; // Spawn new fruit every 1 second\n\n    const spawnFruit = timestamp => {\n      if (timestamp - lastSpawnTime > spawnInterval) {\n        const fruit = {\n          ...FRUITS[Math.floor(Math.random() * FRUITS.length)],\n          x: Math.random() * (canvas.width - 40) + 20,\n          y: canvas.height + 20,\n          velocityY: -15 - Math.random() * 5,\n          velocityX: (Math.random() - 0.5) * 8,\n          rotation: Math.random() * Math.PI * 2,\n          size: 20\n        };\n        setFruits(prev => [...prev, fruit]);\n        lastSpawnTime = timestamp;\n      }\n    };\n    const updateFruits = () => {\n      setFruits(prev => prev.map(fruit => ({\n        ...fruit,\n        x: fruit.x + fruit.velocityX,\n        y: fruit.y + fruit.velocityY,\n        velocityY: fruit.velocityY + 0.5,\n        // gravity\n        rotation: fruit.rotation + 0.02\n      })).filter(fruit => fruit.y < canvas.height + 50));\n    };\n    const drawFruit = (ctx, fruit) => {\n      ctx.save();\n      ctx.translate(fruit.x, fruit.y);\n      ctx.rotate(fruit.rotation);\n      ctx.beginPath();\n      ctx.arc(0, 0, fruit.size, 0, Math.PI * 2);\n      ctx.fillStyle = fruit.color;\n      ctx.fill();\n      ctx.restore();\n    };\n    const drawSlicedFruit = (ctx, slice) => {\n      ctx.save();\n      ctx.translate(slice.x, slice.y);\n      ctx.rotate(slice.rotation);\n      ctx.beginPath();\n      ctx.arc(0, 0, slice.size / 2, 0, Math.PI);\n      ctx.fillStyle = slice.color;\n      ctx.fill();\n      ctx.restore();\n    };\n    const drawMouseTrail = ctx => {\n      if (mouseTrail.length < 2) return;\n      ctx.beginPath();\n      ctx.moveTo(mouseTrail[0].x, mouseTrail[0].y);\n      for (let i = 1; i < mouseTrail.length; i++) {\n        ctx.lineTo(mouseTrail[i].x, mouseTrail[i].y);\n      }\n      ctx.strokeStyle = '#87CEEB';\n      ctx.lineWidth = 3;\n      ctx.lineCap = 'round';\n      ctx.stroke();\n    };\n    const animate = timestamp => {\n      if (!gameOver) {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        spawnFruit(timestamp);\n        updateFruits();\n        fruits.forEach(fruit => drawFruit(ctx, fruit));\n        slicedFruits.forEach(slice => drawSlicedFruit(ctx, slice));\n        drawMouseTrail(ctx);\n        animationFrameId = requestAnimationFrame(animate);\n      }\n    };\n    animate(0);\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [fruits, slicedFruits, mouseTrail, gameOver]);\n  const handleMouseMove = e => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    setMouseTrail(prev => [...prev.slice(-10), {\n      x,\n      y\n    }]);\n\n    // Check for collisions with fruits\n    setFruits(prev => {\n      const newFruits = [...prev];\n      const sliced = [];\n      for (let i = newFruits.length - 1; i >= 0; i--) {\n        const fruit = newFruits[i];\n        const dx = fruit.x - x;\n        const dy = fruit.y - y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance < fruit.size) {\n          // Slice the fruit\n          sliced.push(fruit);\n          newFruits.splice(i, 1);\n          if (fruit.type === 'bomb') {\n            setGameOver(true);\n          } else {\n            setScore(prev => {\n              const newScore = prev + fruit.points;\n              if (newScore > highScore) {\n                setHighScore(newScore);\n                localStorage.setItem('fruitNinjaHighScore', newScore.toString());\n              }\n              return newScore;\n            });\n          }\n        }\n      }\n      setSlicedFruits(prev => [...prev, ...sliced.map(fruit => ({\n        ...fruit,\n        velocityY: fruit.velocityY - 2,\n        velocityX: fruit.velocityX * 1.5\n      }))]);\n      return newFruits;\n    });\n  };\n  const resetGame = () => {\n    setScore(0);\n    setGameOver(false);\n    setFruits([]);\n    setSlicedFruits([]);\n    setMouseTrail([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      padding: '20px'\n    },\n    children: [\"// Add inside the main div of each game component\", /*#__PURE__*/_jsxDEV(BackButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Fruit Ninja\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          marginRight: '20px'\n        },\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"High Score: \", highScore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 800,\n      height: 600,\n      style: {\n        border: '2px solid black',\n        backgroundColor: '#f0f0f0',\n        cursor: 'none'\n      },\n      onMouseMove: handleMouseMove\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Game Over!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n_s(FruitNinja, \"jMkNr7N7zkwQrXXD41wAsjAWL7s=\");\n_c = FruitNinja;\nexport default FruitNinja;\nvar _c;\n$RefreshReg$(_c, \"FruitNinja\");","map":{"version":3,"names":["React","useState","useEffect","useRef","BackButton","jsxDEV","_jsxDEV","FRUITS","type","color","points","FruitNinja","_s","canvasRef","score","setScore","gameOver","setGameOver","highScore","setHighScore","parseInt","localStorage","getItem","fruits","setFruits","slicedFruits","setSlicedFruits","mouseTrail","setMouseTrail","canvas","current","ctx","getContext","animationFrameId","lastSpawnTime","spawnInterval","spawnFruit","timestamp","fruit","Math","floor","random","length","x","width","y","height","velocityY","velocityX","rotation","PI","size","prev","updateFruits","map","filter","drawFruit","save","translate","rotate","beginPath","arc","fillStyle","fill","restore","drawSlicedFruit","slice","drawMouseTrail","moveTo","i","lineTo","strokeStyle","lineWidth","lineCap","stroke","animate","clearRect","forEach","requestAnimationFrame","cancelAnimationFrame","handleMouseMove","e","rect","getBoundingClientRect","clientX","left","clientY","top","newFruits","sliced","dx","dy","distance","sqrt","push","splice","newScore","setItem","toString","resetGame","style","textAlign","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","marginRight","ref","border","backgroundColor","cursor","onMouseMove","marginTop","onClick","_c","$RefreshReg$"],"sources":["/Users/ashwin/Desktop/PG Dashboard/pg/src/components/fruitNinja.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n// Add to imports\nimport BackButton from './BackButton';\n\n\n\nconst FRUITS = [\n  { type: 'apple', color: '#ff0000', points: 1 },\n  { type: 'orange', color: '#ffa500', points: 2 },\n  { type: 'banana', color: '#ffff00', points: 3 },\n  { type: 'watermelon', color: '#ff6b6b', points: 5 },\n  { type: 'bomb', color: '#000000', points: -10 },\n];\n\nconst FruitNinja = () => {\n  const canvasRef = useRef(null);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [highScore, setHighScore] = useState(\n    parseInt(localStorage.getItem('fruitNinjaHighScore')) || 0\n  );\n\n  const [fruits, setFruits] = useState([]);\n  const [slicedFruits, setSlicedFruits] = useState([]);\n  const [mouseTrail, setMouseTrail] = useState([]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let animationFrameId;\n    let lastSpawnTime = 0;\n    const spawnInterval = 1000; // Spawn new fruit every 1 second\n\n    const spawnFruit = (timestamp) => {\n      if (timestamp - lastSpawnTime > spawnInterval) {\n        const fruit = {\n          ...FRUITS[Math.floor(Math.random() * FRUITS.length)],\n          x: Math.random() * (canvas.width - 40) + 20,\n          y: canvas.height + 20,\n          velocityY: -15 - Math.random() * 5,\n          velocityX: (Math.random() - 0.5) * 8,\n          rotation: Math.random() * Math.PI * 2,\n          size: 20,\n        };\n        setFruits(prev => [...prev, fruit]);\n        lastSpawnTime = timestamp;\n      }\n    };\n\n    const updateFruits = () => {\n      setFruits(prev => prev.map(fruit => ({\n        ...fruit,\n        x: fruit.x + fruit.velocityX,\n        y: fruit.y + fruit.velocityY,\n        velocityY: fruit.velocityY + 0.5, // gravity\n        rotation: fruit.rotation + 0.02,\n      })).filter(fruit => fruit.y < canvas.height + 50));\n    };\n\n    const drawFruit = (ctx, fruit) => {\n      ctx.save();\n      ctx.translate(fruit.x, fruit.y);\n      ctx.rotate(fruit.rotation);\n      ctx.beginPath();\n      ctx.arc(0, 0, fruit.size, 0, Math.PI * 2);\n      ctx.fillStyle = fruit.color;\n      ctx.fill();\n      ctx.restore();\n    };\n\n    const drawSlicedFruit = (ctx, slice) => {\n      ctx.save();\n      ctx.translate(slice.x, slice.y);\n      ctx.rotate(slice.rotation);\n      ctx.beginPath();\n      ctx.arc(0, 0, slice.size / 2, 0, Math.PI);\n      ctx.fillStyle = slice.color;\n      ctx.fill();\n      ctx.restore();\n    };\n\n    const drawMouseTrail = (ctx) => {\n      if (mouseTrail.length < 2) return;\n      \n      ctx.beginPath();\n      ctx.moveTo(mouseTrail[0].x, mouseTrail[0].y);\n      for (let i = 1; i < mouseTrail.length; i++) {\n        ctx.lineTo(mouseTrail[i].x, mouseTrail[i].y);\n      }\n      ctx.strokeStyle = '#87CEEB';\n      ctx.lineWidth = 3;\n      ctx.lineCap = 'round';\n      ctx.stroke();\n    };\n\n    const animate = (timestamp) => {\n      if (!gameOver) {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        \n        spawnFruit(timestamp);\n        updateFruits();\n        \n        fruits.forEach(fruit => drawFruit(ctx, fruit));\n        slicedFruits.forEach(slice => drawSlicedFruit(ctx, slice));\n        drawMouseTrail(ctx);\n        \n        animationFrameId = requestAnimationFrame(animate);\n      }\n    };\n\n    animate(0);\n\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [fruits, slicedFruits, mouseTrail, gameOver]);\n\n  const handleMouseMove = (e) => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    setMouseTrail(prev => [...prev.slice(-10), { x, y }]);\n\n    // Check for collisions with fruits\n    setFruits(prev => {\n      const newFruits = [...prev];\n      const sliced = [];\n      \n      for (let i = newFruits.length - 1; i >= 0; i--) {\n        const fruit = newFruits[i];\n        const dx = fruit.x - x;\n        const dy = fruit.y - y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n\n        if (distance < fruit.size) {\n          // Slice the fruit\n          sliced.push(fruit);\n          newFruits.splice(i, 1);\n\n          if (fruit.type === 'bomb') {\n            setGameOver(true);\n          } else {\n            setScore(prev => {\n              const newScore = prev + fruit.points;\n              if (newScore > highScore) {\n                setHighScore(newScore);\n                localStorage.setItem('fruitNinjaHighScore', newScore.toString());\n              }\n              return newScore;\n            });\n          }\n        }\n      }\n\n      setSlicedFruits(prev => [...prev, ...sliced.map(fruit => ({\n        ...fruit,\n        velocityY: fruit.velocityY - 2,\n        velocityX: fruit.velocityX * 1.5,\n      }))]);\n\n      return newFruits;\n    });\n  };\n\n  const resetGame = () => {\n    setScore(0);\n    setGameOver(false);\n    setFruits([]);\n    setSlicedFruits([]);\n    setMouseTrail([]);\n  };\n\n  return (\n    <div style={{ textAlign: 'center', padding: '20px' }}>\n        // Add inside the main div of each game component\n        <BackButton />\n      <h2>Fruit Ninja</h2>\n      <div style={{ marginBottom: '10px' }}>\n        <span style={{ marginRight: '20px' }}>Score: {score}</span>\n        <span>High Score: {highScore}</span>\n      </div>\n      <canvas\n        ref={canvasRef}\n        width={800}\n        height={600}\n        style={{ \n          border: '2px solid black',\n          backgroundColor: '#f0f0f0',\n          cursor: 'none'\n        }}\n        onMouseMove={handleMouseMove}\n      />\n      {gameOver && (\n        <div style={{ marginTop: '20px' }}>\n          <p>Game Over!</p>\n          <button onClick={resetGame}>Play Again</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FruitNinja; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}