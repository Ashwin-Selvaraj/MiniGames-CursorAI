{"ast":null,"code":"var _jsxFileName = \"/Users/ashwin/Desktop/PG Dashboard/pg/src/components/snakeGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport BackButton from './BackButton';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GRID_SIZE = 20;\nconst CELL_SIZE = 20;\nconst INITIAL_SNAKE = [{\n  x: 8,\n  y: 8\n}];\nconst INITIAL_FOOD = {\n  x: 15,\n  y: 10\n};\nconst INITIAL_DIRECTION = 'RIGHT';\nconst INITIAL_SPEED = 150;\n\n// Different food types with their properties\nconst FOOD_TYPES = {\n  NORMAL: {\n    color: '#ff3333',\n    points: 1,\n    speedChange: 0,\n    effect: null\n  },\n  SPEED_UP: {\n    color: '#ffff00',\n    points: 2,\n    speedChange: -20,\n    effect: 'speed'\n  },\n  SLOW_DOWN: {\n    color: '#00ff00',\n    points: 3,\n    speedChange: 20,\n    effect: 'slow'\n  },\n  GHOST: {\n    color: '#aa88ff',\n    points: 5,\n    speedChange: 0,\n    effect: 'ghost'\n  }\n};\nconst SnakeGame = () => {\n  _s();\n  const [snake, setSnake] = useState(INITIAL_SNAKE);\n  const [food, setFood] = useState(INITIAL_FOOD);\n  const [foodType, setFoodType] = useState(FOOD_TYPES.NORMAL);\n  const [direction, setDirection] = useState(INITIAL_DIRECTION);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [speed, setSpeed] = useState(INITIAL_SPEED);\n  const [isPaused, setIsPaused] = useState(false);\n  const [ghostMode, setGhostMode] = useState(false);\n  const [highScore, setHighScore] = useState(parseInt(localStorage.getItem('snakeHighScore')) || 0);\n  const [level, setLevel] = useState(1);\n  const [obstacles, setObstacles] = useState([]);\n  const generateObstacles = useCallback(() => {\n    const newObstacles = [];\n    const numObstacles = Math.min(3 + Math.floor(level / 2), 8);\n    for (let i = 0; i < numObstacles; i++) {\n      let obstacle;\n      do {\n        obstacle = {\n          x: Math.floor(Math.random() * GRID_SIZE),\n          y: Math.floor(Math.random() * GRID_SIZE)\n        };\n      } while (snake.some(s => s.x === obstacle.x && s.y === obstacle.y) || food.x === obstacle.x && food.y === obstacle.y || newObstacles.some(o => o.x === obstacle.x && o.y === obstacle.y));\n      newObstacles.push(obstacle);\n    }\n    return newObstacles;\n  }, [snake, food, level]);\n  const generateFood = useCallback(() => {\n    let newFood;\n    do {\n      newFood = {\n        x: Math.floor(Math.random() * GRID_SIZE),\n        y: Math.floor(Math.random() * GRID_SIZE)\n      };\n    } while (snake.some(segment => segment.x === newFood.x && segment.y === newFood.y) || obstacles.some(obs => obs.x === newFood.x && obs.y === newFood.y));\n\n    // Randomly select food type based on current level\n    const foodTypes = Object.values(FOOD_TYPES);\n    const randomNum = Math.random();\n    let selectedType;\n    if (randomNum < 0.6) {\n      selectedType = FOOD_TYPES.NORMAL;\n    } else if (randomNum < 0.75) {\n      selectedType = FOOD_TYPES.SPEED_UP;\n    } else if (randomNum < 0.9) {\n      selectedType = FOOD_TYPES.SLOW_DOWN;\n    } else {\n      selectedType = FOOD_TYPES.GHOST;\n    }\n    setFoodType(selectedType);\n    return newFood;\n  }, [snake, obstacles]);\n  const moveSnake = useCallback(() => {\n    if (gameOver || isPaused) return;\n    const newSnake = [...snake];\n    const head = {\n      ...newSnake[0]\n    };\n    switch (direction) {\n      case 'UP':\n        head.y -= 1;\n        break;\n      case 'DOWN':\n        head.y += 1;\n        break;\n      case 'LEFT':\n        head.x -= 1;\n        break;\n      case 'RIGHT':\n        head.x += 1;\n        break;\n      default:\n        break;\n    }\n\n    // Wrap around walls if in ghost mode, otherwise check collision\n    if (!ghostMode) {\n      if (head.x < 0 || head.x >= GRID_SIZE || head.y < 0 || head.y >= GRID_SIZE) {\n        setGameOver(true);\n        return;\n      }\n    } else {\n      head.x = (head.x + GRID_SIZE) % GRID_SIZE;\n      head.y = (head.y + GRID_SIZE) % GRID_SIZE;\n    }\n\n    // Check collision with self\n    if (newSnake.some(segment => segment.x === head.x && segment.y === head.y)) {\n      setGameOver(true);\n      return;\n    }\n\n    // Check collision with obstacles when not in ghost mode\n    if (!ghostMode && obstacles.some(obs => obs.x === head.x && obs.y === head.y)) {\n      setGameOver(true);\n      return;\n    }\n    newSnake.unshift(head);\n\n    // Check if snake ate food\n    if (head.x === food.x && head.y === food.y) {\n      setScore(prevScore => {\n        const newScore = prevScore + foodType.points;\n        if (newScore > highScore) {\n          setHighScore(newScore);\n          localStorage.setItem('snakeHighScore', newScore.toString());\n        }\n        return newScore;\n      });\n\n      // Apply food effects\n      if (foodType.effect === 'speed' || foodType.effect === 'slow') {\n        setSpeed(prev => Math.max(50, Math.min(300, prev + foodType.speedChange)));\n      } else if (foodType.effect === 'ghost') {\n        setGhostMode(true);\n        setTimeout(() => setGhostMode(false), 5000);\n      }\n      setFood(generateFood());\n\n      // Level up every 5 points\n      if ((score + foodType.points) % 5 === 0) {\n        setLevel(prev => prev + 1);\n        setObstacles(generateObstacles());\n      }\n    } else {\n      newSnake.pop();\n    }\n    setSnake(newSnake);\n  }, [snake, direction, food, gameOver, generateFood, score, highScore, ghostMode, obstacles, isPaused, foodType, generateObstacles]);\n  const handleKeyPress = useCallback(e => {\n    e.preventDefault();\n    switch (e.key) {\n      case 'ArrowUp':\n        if (direction !== 'DOWN') setDirection('UP');\n        break;\n      case 'ArrowDown':\n        if (direction !== 'UP') setDirection('DOWN');\n        break;\n      case 'ArrowLeft':\n        if (direction !== 'RIGHT') setDirection('LEFT');\n        break;\n      case 'ArrowRight':\n        if (direction !== 'LEFT') setDirection('RIGHT');\n        break;\n      case ' ':\n        setIsPaused(prev => !prev);\n        break;\n      default:\n        break;\n    }\n  }, [direction]);\n  useEffect(() => {\n    const gameInterval = setInterval(moveSnake, speed);\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      clearInterval(gameInterval);\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [moveSnake, handleKeyPress, speed]);\n  const resetGame = () => {\n    setSnake(INITIAL_SNAKE);\n    setFood(INITIAL_FOOD);\n    setFoodType(FOOD_TYPES.NORMAL);\n    setDirection(INITIAL_DIRECTION);\n    setGameOver(false);\n    setScore(0);\n    setSpeed(INITIAL_SPEED);\n    setGhostMode(false);\n    setLevel(1);\n    setObstacles(generateObstacles());\n    setIsPaused(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      padding: '20px'\n    },\n    children: [\"// Add inside the main div of each game component\", /*#__PURE__*/_jsxDEV(BackButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Snake Game - Level \", level]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          marginRight: '20px'\n        },\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"High Score: \", highScore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'inline-block',\n        position: 'relative',\n        width: GRID_SIZE * CELL_SIZE,\n        height: GRID_SIZE * CELL_SIZE,\n        border: '2px solid black',\n        backgroundColor: '#1a1a1a'\n      },\n      children: [snake.map((segment, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          left: segment.x * CELL_SIZE,\n          top: segment.y * CELL_SIZE,\n          width: CELL_SIZE,\n          height: CELL_SIZE,\n          backgroundColor: index === 0 ? '#4a9eff' : '#2d7cd6',\n          borderRadius: index === 0 ? '8px 8px 0 0' : '0px',\n          border: '1px solid rgba(255,255,255,0.2)',\n          transform: index === 0 ? `rotate(${direction === 'UP' ? '-90deg' : direction === 'DOWN' ? '90deg' : direction === 'LEFT' ? '180deg' : '0deg'})` : 'none',\n          boxShadow: 'inset 0 0 8px rgba(0,0,0,0.3)',\n          backgroundImage: `linear-gradient(\n                ${index === 0 ? '45deg' : '0deg'},\n                ${index === 0 ? '#4a9eff' : '#2d7cd6'} 0%,\n                #89c2ff 50%,\n                ${index === 0 ? '#4a9eff' : '#2d7cd6'} 100%\n              )`,\n          '&::before': {\n            content: '\"\"',\n            position: 'absolute',\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            background: 'repeating-linear-gradient(45deg, transparent, transparent 5px, rgba(255,255,255,0.1) 5px, rgba(255,255,255,0.1) 10px)',\n            borderRadius: 'inherit'\n          }\n        },\n        children: index === 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              position: 'absolute',\n              width: '4px',\n              height: '4px',\n              backgroundColor: 'black',\n              borderRadius: '50%',\n              top: '4px',\n              left: '4px',\n              boxShadow: '0 0 2px rgba(255,255,255,0.5)'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              position: 'absolute',\n              width: '4px',\n              height: '4px',\n              backgroundColor: 'black',\n              borderRadius: '50%',\n              top: '4px',\n              right: '4px',\n              boxShadow: '0 0 2px rgba(255,255,255,0.5)'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }, this)), obstacles.map((obstacle, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          left: obstacle.x * CELL_SIZE,\n          top: obstacle.y * CELL_SIZE,\n          width: CELL_SIZE,\n          height: CELL_SIZE,\n          backgroundColor: '#666666',\n          border: '1px solid #888888',\n          boxShadow: 'inset 0 0 8px rgba(0,0,0,0.5)'\n        }\n      }, `obstacle-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          left: food.x * CELL_SIZE,\n          top: food.y * CELL_SIZE,\n          width: CELL_SIZE - 4,\n          height: CELL_SIZE - 4,\n          margin: '2px',\n          backgroundColor: foodType.color,\n          borderRadius: '50%',\n          boxShadow: `0 0 8px ${foodType.color}`,\n          border: '1px solid rgba(255,255,255,0.3)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: [ghostMode && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: '#aa88ff'\n        },\n        children: \"Ghost Mode Active!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 23\n      }, this), isPaused && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Game Paused\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 22\n      }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Game Over!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n};\n_s(SnakeGame, \"gJjNLohFlukzAY2pfZqrUGg4n0E=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","BackButton","jsxDEV","_jsxDEV","Fragment","_Fragment","GRID_SIZE","CELL_SIZE","INITIAL_SNAKE","x","y","INITIAL_FOOD","INITIAL_DIRECTION","INITIAL_SPEED","FOOD_TYPES","NORMAL","color","points","speedChange","effect","SPEED_UP","SLOW_DOWN","GHOST","SnakeGame","_s","snake","setSnake","food","setFood","foodType","setFoodType","direction","setDirection","gameOver","setGameOver","score","setScore","speed","setSpeed","isPaused","setIsPaused","ghostMode","setGhostMode","highScore","setHighScore","parseInt","localStorage","getItem","level","setLevel","obstacles","setObstacles","generateObstacles","newObstacles","numObstacles","Math","min","floor","i","obstacle","random","some","s","o","push","generateFood","newFood","segment","obs","foodTypes","Object","values","randomNum","selectedType","moveSnake","newSnake","head","unshift","prevScore","newScore","setItem","toString","prev","max","setTimeout","pop","handleKeyPress","e","preventDefault","key","gameInterval","setInterval","window","addEventListener","clearInterval","removeEventListener","resetGame","style","textAlign","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","marginRight","display","position","width","height","border","backgroundColor","map","index","left","top","borderRadius","transform","boxShadow","backgroundImage","content","right","bottom","background","margin","marginTop","onClick","_c","$RefreshReg$"],"sources":["/Users/ashwin/Desktop/PG Dashboard/pg/src/components/snakeGame.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport BackButton from './BackButton';\n\n\nconst GRID_SIZE = 20;\nconst CELL_SIZE = 20;\nconst INITIAL_SNAKE = [{ x: 8, y: 8 }];\nconst INITIAL_FOOD = { x: 15, y: 10 };\nconst INITIAL_DIRECTION = 'RIGHT';\nconst INITIAL_SPEED = 150;\n\n// Different food types with their properties\nconst FOOD_TYPES = {\n  NORMAL: { color: '#ff3333', points: 1, speedChange: 0, effect: null },\n  SPEED_UP: { color: '#ffff00', points: 2, speedChange: -20, effect: 'speed' },\n  SLOW_DOWN: { color: '#00ff00', points: 3, speedChange: 20, effect: 'slow' },\n  GHOST: { color: '#aa88ff', points: 5, speedChange: 0, effect: 'ghost' },\n};\n\nconst SnakeGame = () => {\n  const [snake, setSnake] = useState(INITIAL_SNAKE);\n  const [food, setFood] = useState(INITIAL_FOOD);\n  const [foodType, setFoodType] = useState(FOOD_TYPES.NORMAL);\n  const [direction, setDirection] = useState(INITIAL_DIRECTION);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [speed, setSpeed] = useState(INITIAL_SPEED);\n  const [isPaused, setIsPaused] = useState(false);\n  const [ghostMode, setGhostMode] = useState(false);\n  const [highScore, setHighScore] = useState(\n    parseInt(localStorage.getItem('snakeHighScore')) || 0\n  );\n  const [level, setLevel] = useState(1);\n  const [obstacles, setObstacles] = useState([]);\n\n  const generateObstacles = useCallback(() => {\n    const newObstacles = [];\n    const numObstacles = Math.min(3 + Math.floor(level / 2), 8);\n    \n    for (let i = 0; i < numObstacles; i++) {\n      let obstacle;\n      do {\n        obstacle = {\n          x: Math.floor(Math.random() * GRID_SIZE),\n          y: Math.floor(Math.random() * GRID_SIZE)\n        };\n      } while (\n        snake.some(s => s.x === obstacle.x && s.y === obstacle.y) ||\n        (food.x === obstacle.x && food.y === obstacle.y) ||\n        newObstacles.some(o => o.x === obstacle.x && o.y === obstacle.y)\n      );\n      newObstacles.push(obstacle);\n    }\n    return newObstacles;\n  }, [snake, food, level]);\n\n  const generateFood = useCallback(() => {\n    let newFood;\n    do {\n      newFood = {\n        x: Math.floor(Math.random() * GRID_SIZE),\n        y: Math.floor(Math.random() * GRID_SIZE),\n      };\n    } while (\n      snake.some(segment => segment.x === newFood.x && segment.y === newFood.y) ||\n      obstacles.some(obs => obs.x === newFood.x && obs.y === newFood.y)\n    );\n\n    // Randomly select food type based on current level\n    const foodTypes = Object.values(FOOD_TYPES);\n    const randomNum = Math.random();\n    let selectedType;\n\n    if (randomNum < 0.6) {\n      selectedType = FOOD_TYPES.NORMAL;\n    } else if (randomNum < 0.75) {\n      selectedType = FOOD_TYPES.SPEED_UP;\n    } else if (randomNum < 0.9) {\n      selectedType = FOOD_TYPES.SLOW_DOWN;\n    } else {\n      selectedType = FOOD_TYPES.GHOST;\n    }\n\n    setFoodType(selectedType);\n    return newFood;\n  }, [snake, obstacles]);\n\n  const moveSnake = useCallback(() => {\n    if (gameOver || isPaused) return;\n\n    const newSnake = [...snake];\n    const head = { ...newSnake[0] };\n\n    switch (direction) {\n      case 'UP': head.y -= 1; break;\n      case 'DOWN': head.y += 1; break;\n      case 'LEFT': head.x -= 1; break;\n      case 'RIGHT': head.x += 1; break;\n      default: break;\n    }\n\n    // Wrap around walls if in ghost mode, otherwise check collision\n    if (!ghostMode) {\n      if (head.x < 0 || head.x >= GRID_SIZE || head.y < 0 || head.y >= GRID_SIZE) {\n        setGameOver(true);\n        return;\n      }\n    } else {\n      head.x = (head.x + GRID_SIZE) % GRID_SIZE;\n      head.y = (head.y + GRID_SIZE) % GRID_SIZE;\n    }\n\n    // Check collision with self\n    if (newSnake.some(segment => segment.x === head.x && segment.y === head.y)) {\n      setGameOver(true);\n      return;\n    }\n\n    // Check collision with obstacles when not in ghost mode\n    if (!ghostMode && obstacles.some(obs => obs.x === head.x && obs.y === head.y)) {\n      setGameOver(true);\n      return;\n    }\n\n    newSnake.unshift(head);\n\n    // Check if snake ate food\n    if (head.x === food.x && head.y === food.y) {\n      setScore(prevScore => {\n        const newScore = prevScore + foodType.points;\n        if (newScore > highScore) {\n          setHighScore(newScore);\n          localStorage.setItem('snakeHighScore', newScore.toString());\n        }\n        return newScore;\n      });\n\n      // Apply food effects\n      if (foodType.effect === 'speed' || foodType.effect === 'slow') {\n        setSpeed(prev => Math.max(50, Math.min(300, prev + foodType.speedChange)));\n      } else if (foodType.effect === 'ghost') {\n        setGhostMode(true);\n        setTimeout(() => setGhostMode(false), 5000);\n      }\n\n      setFood(generateFood());\n      \n      // Level up every 5 points\n      if ((score + foodType.points) % 5 === 0) {\n        setLevel(prev => prev + 1);\n        setObstacles(generateObstacles());\n      }\n    } else {\n      newSnake.pop();\n    }\n\n    setSnake(newSnake);\n  }, [snake, direction, food, gameOver, generateFood, score, highScore, \n      ghostMode, obstacles, isPaused, foodType, generateObstacles]);\n\n  const handleKeyPress = useCallback((e) => {\n    e.preventDefault();\n    switch (e.key) {\n      case 'ArrowUp':\n        if (direction !== 'DOWN') setDirection('UP');\n        break;\n      case 'ArrowDown':\n        if (direction !== 'UP') setDirection('DOWN');\n        break;\n      case 'ArrowLeft':\n        if (direction !== 'RIGHT') setDirection('LEFT');\n        break;\n      case 'ArrowRight':\n        if (direction !== 'LEFT') setDirection('RIGHT');\n        break;\n      case ' ':\n        setIsPaused(prev => !prev);\n        break;\n      default:\n        break;\n    }\n  }, [direction]);\n\n  useEffect(() => {\n    const gameInterval = setInterval(moveSnake, speed);\n    window.addEventListener('keydown', handleKeyPress);\n\n    return () => {\n      clearInterval(gameInterval);\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [moveSnake, handleKeyPress, speed]);\n\n  const resetGame = () => {\n    setSnake(INITIAL_SNAKE);\n    setFood(INITIAL_FOOD);\n    setFoodType(FOOD_TYPES.NORMAL);\n    setDirection(INITIAL_DIRECTION);\n    setGameOver(false);\n    setScore(0);\n    setSpeed(INITIAL_SPEED);\n    setGhostMode(false);\n    setLevel(1);\n    setObstacles(generateObstacles());\n    setIsPaused(false);\n  };\n\n  return (\n    <div style={{ textAlign: 'center', padding: '20px' }}>\n        // Add inside the main div of each game component\n        <BackButton />\n      <h2>Snake Game - Level {level}</h2>\n      <div style={{ marginBottom: '10px' }}>\n        <span style={{ marginRight: '20px' }}>Score: {score}</span>\n        <span>High Score: {highScore}</span>\n      </div>\n      <div style={{ \n        display: 'inline-block',\n        position: 'relative',\n        width: GRID_SIZE * CELL_SIZE,\n        height: GRID_SIZE * CELL_SIZE,\n        border: '2px solid black',\n        backgroundColor: '#1a1a1a'\n      }}>\n        {/* Render snake */}\n        {snake.map((segment, index) => (\n          <div\n            key={index}\n            style={{\n              position: 'absolute',\n              left: segment.x * CELL_SIZE,\n              top: segment.y * CELL_SIZE,\n              width: CELL_SIZE,\n              height: CELL_SIZE,\n              backgroundColor: index === 0 ? '#4a9eff' : '#2d7cd6',\n              borderRadius: index === 0 ? '8px 8px 0 0' : '0px',\n              border: '1px solid rgba(255,255,255,0.2)',\n              transform: index === 0 ? `rotate(${\n                direction === 'UP' ? '-90deg' :\n                direction === 'DOWN' ? '90deg' :\n                direction === 'LEFT' ? '180deg' : '0deg'\n              })` : 'none',\n              boxShadow: 'inset 0 0 8px rgba(0,0,0,0.3)',\n              backgroundImage: `linear-gradient(\n                ${index === 0 ? '45deg' : '0deg'},\n                ${index === 0 ? '#4a9eff' : '#2d7cd6'} 0%,\n                #89c2ff 50%,\n                ${index === 0 ? '#4a9eff' : '#2d7cd6'} 100%\n              )`,\n              '&::before': {\n                content: '\"\"',\n                position: 'absolute',\n                top: '0',\n                left: '0',\n                right: '0',\n                bottom: '0',\n                background: 'repeating-linear-gradient(45deg, transparent, transparent 5px, rgba(255,255,255,0.1) 5px, rgba(255,255,255,0.1) 10px)',\n                borderRadius: 'inherit'\n              }\n            }}\n          >\n            {index === 0 && (\n              <>\n                <div style={{\n                  position: 'absolute',\n                  width: '4px',\n                  height: '4px',\n                  backgroundColor: 'black',\n                  borderRadius: '50%',\n                  top: '4px',\n                  left: '4px',\n                  boxShadow: '0 0 2px rgba(255,255,255,0.5)'\n                }} />\n                <div style={{\n                  position: 'absolute',\n                  width: '4px',\n                  height: '4px',\n                  backgroundColor: 'black',\n                  borderRadius: '50%',\n                  top: '4px',\n                  right: '4px',\n                  boxShadow: '0 0 2px rgba(255,255,255,0.5)'\n                }} />\n              </>\n            )}\n          </div>\n        ))}\n        {/* Render obstacles */}\n        {obstacles.map((obstacle, index) => (\n          <div\n            key={`obstacle-${index}`}\n            style={{\n              position: 'absolute',\n              left: obstacle.x * CELL_SIZE,\n              top: obstacle.y * CELL_SIZE,\n              width: CELL_SIZE,\n              height: CELL_SIZE,\n              backgroundColor: '#666666',\n              border: '1px solid #888888',\n              boxShadow: 'inset 0 0 8px rgba(0,0,0,0.5)'\n            }}\n          />\n        ))}\n        {/* Render food with current type */}\n        <div\n          style={{\n            position: 'absolute',\n            left: food.x * CELL_SIZE,\n            top: food.y * CELL_SIZE,\n            width: CELL_SIZE - 4,\n            height: CELL_SIZE - 4,\n            margin: '2px',\n            backgroundColor: foodType.color,\n            borderRadius: '50%',\n            boxShadow: `0 0 8px ${foodType.color}`,\n            border: '1px solid rgba(255,255,255,0.3)'\n          }}\n        />\n      </div>\n      <div style={{ marginTop: '20px' }}>\n        {ghostMode && <p style={{ color: '#aa88ff' }}>Ghost Mode Active!</p>}\n        {isPaused && <p>Game Paused</p>}\n        {gameOver && (\n          <div>\n            <p>Game Over!</p>\n            <button onClick={resetGame}>Play Again</button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SnakeGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}